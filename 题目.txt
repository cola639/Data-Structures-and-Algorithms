假设我们有`numCourses = 4`门课程和`prerequisites = [[1, 0], [2, 1], [3, 2]]`作为先修课程条件。
这意味着要学习课程1必须先完成课程0，学习课程2必须先完成课程1，学习课程3必须先完成课程2。

我们的目标是判断是否可以完成所有4门课程的学习。下面是JavaScript代码的执行流程：

1. **构建邻接表**：首先，根据`prerequisites`构建邻接表`adjacency`。
   - `adjacency[0]` = []
   - `adjacency[1]` = [2]
   - `adjacency[2]` = [3]
   - `adjacency[3]` = []

   表示课程0没有先修课，课程1的先修课是课程0，课程2的先修课是课程1，课程3的先修课是课程2。

2. **初始化访问标志数组**：`flags` = [0, 0, 0, 0]，表示所有课程都未访问。

3. **递归检测**：
   - 从课程0开始，标记`flags[0] = 1`，表示课程0正在访问中。由于课程0没有先修课，直接将`flags[0] = -1`，表示从课程0出发的所有路径探索完成，回溯。
   - 接着检测课程1，标记`flags[1] = 1`，递归检测其先修课程0。由于课程0的`flags[0] = -1`，继续前进，最终将`flags[1] = -1`。
   - 以此类推，课程2和课程3也被依次检测。最终，所有课程的`flags`都被设置为`-1`，表示所有课程都可以完成学习。

由于所有课程都可以在没有环的情况下完成学习（即不存在相互依赖的情况），函数返回`true`。

**总结**：这个过程通过DFS检测了有向图（课程和先修关系构成的图）中是否存在环。在这个例子中，图是有向无环图（DAG），所以可以完成所有课程的学习。通过递归深度优先搜索，我们能够遍历图的所有边和节点，正确地检测出是否存在不能完成的课程情况。



/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {boolean}
 */
 // prerequisites = [[1,0],[2,1],[3,2]]
var canFinish = function(numCourses, prerequisites) {
    const adjacency = Array.from({ length: numCourses }, () => []);
    const flags = new Array(numCourses).fill(0);

    // 构建邻接表
    for (let [cur, pre] of prerequisites) {
        adjacency[pre].push(cur);
    }   // adjacency = [[1],[2],[3]]

    // 尝试访问每个节点
    for (let i = 0; i < numCourses; i++) {
        if (!dfs(i, adjacency, flags)) return false;
    }
    return true;
};

// 抽离的 dfs 函数
function dfs(i, adjacency, flags) {
    if (flags[i] === -1) return true; // 已经访问过，且无环
    if (flags[i] === 1) return false; // 正在访问中，发现环
    flags[i] = 1; // 标记为正在访问
    for (let j of adjacency[i]) {
        if (!dfs(j, adjacency, flags)) return false; // 深度优先搜索
    }
    flags[i] = -1; // 标记为访问结束，无环
    return true;
}

0 → 1 → 3
↓   ↗
2 →


这段`dfs`函数是一个典型的深度优先搜索（DFS）过程，用于探索图中的节点，并检测是否存在环。在探索过程中，它使用`flags`数组来记录每个节点的状态：

- `flags[i] = 0`表示节点`i`未被访问；
- `flags[i] = 1`表示节点`i`正在被访问（递归栈中）；
- `flags[i] = -1`表示节点`i`已经被访问过，并且从该节点出发的所有路径都已探索完毕，无环。

### 示例解释

假设有4个课程（0到3），先修关系为`[[0, 1], [2, 3], [3, 1]]`，这表示：
- 要学课程0，必须先学课程1。
- 要学课程2，必须先学课程3。
- 要学课程3，必须先学课程1。

构建的邻接表`adjacency`为`[[1], [], [3], [1]]`，表示：
- 课程0的后续课程有1。
- 课程1没有后续课程。
- 课程2的后续课程有3。
- 课程3的后续课程有1。

开始时，`flags`都初始化为0，表示没有课程被访问过。

#### 访问课程0
- 开始访问课程0（`dfs(0, adjacency, flags)`），`flags[0]`设置为1。
- 访问其后续课程1，`flags[1]`设置为1。课程1没有后续课程，访问结束，`flags[1]`设置为-1。

#### 访问课程2
- 访问课程2（`dfs(2, adjacency, flags)`），`flags[2]`设置为1。
- 访问其后续课程3，`flags[3]`设置为1。
- 访问课程3的后续课程1。由于`flags[1]`已经是-1，表示课程1及其后续课程已被探索且无环，直接返回true。
- 课程3的探索结束，`flags[3]`设置为-1。
- 课程2的探索结束，`flags[2]`设置为-1。

此过程中，没有发现`flags[i]`为1的节点再次被访问，即没有检测到环，所以函数最终返回true，表示可以完成所有课程的学习。

通过这个`dfs`函数，我们能检测图（课程和先修关系构成的图）中是否存在环。如果存在环，则表示有课程互相为对方的先修课，这样的课程安排是无法完成的，函数会在检测到环时返回false。



假设有`numCourses = 4`门课程（编号为0到3），并且有先修课程关系`prerequisites = [[1, 0], [2, 0], [3, 1], [3, 2]]`。这表示要修课程1必须先修课程0，修课程2也要先修课程0，修课程3则需要先修课程1和2。

我们可以将这个关系转化为一张有向图：

```
0 → 1 → 3
↓    ↗
2 →
```

在这张图中，箭头指向的方向表示一门课程是另一门课程的先修课。例如，箭头从0指向1表示课程0是课程1的先修课。

### 运行`dfs`的过程：

1. **初始状态**：所有课程的`flags`都初始化为0，表示未访问。

2. **访问课程0**：
   - 将`flags[0]`设置为1，表示课程0正在访问中。
   - 课程0有两个后继课程：1和2。对课程1和2递归调用`dfs`。
   - 访问结束后，将`flags[0]`设置为-1，表示课程0及其所有后继课程的访问结束，没有发现环。

3. **访问课程1**（从课程0的递归中进入）：
   - 类似地，将`flags[1]`设置为1。
   - 课程1有一个后继课程：3。对课程3递归调用`dfs`。
   - 访问结束后，将`flags[1]`设置为-1。

4. **访问课程2**（从课程0的递归中进入，和直接访问）：
   - 设置`flags[2]`为1。
   - 课程2有一个后继课程：3。对课程3递归调用`dfs`（如果此时课程3已经在课程1的递归中访问结束，则直接返回true）。
   - 访问结束后，将`flags[2]`设置为-1。

5. **访问课程3**：
   - 在课程1和课程2的递归中均会访问到课程3。
   - 设置`flags[3]`为1，由于课程3没有后继课程，直接将`flags[3]`设置为-1。

在整个`dfs`过程中，每个课程都被成功访问，没有发现正在访问中的课程被再次访问（即没有发现环）。因此，这个课程安排是合理的，可以完成所有课程的学习，函数返回`true`。