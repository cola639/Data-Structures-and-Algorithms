// 链表-快慢指针解法
// 1. 创建一个哑节点作为新的链表头，以便能够统一处理头节点可能被删除的情况。
// 2. 使用两个指针slow和fast，slow指向当前确定不重复的最后一个节点，fast用于探索前面的节点。
// 3. 遍历链表：
//   - 如果fast指向的节点与下一个节点值相同，fast继续向前移动，直到指向最后一个重复的节点。
//   - 如果fast指向的节点与下一个节点值不同，说明这是一个不重复的节点，将slow的next指向fast。
//   - 如果遇到重复的节点，通过移动fast跳过所有重复节点，直到找到一个不同的值或到达链表末尾。
// 4. 断开最后的节点，以防止原链表尾部可能存在的重复节点被链接。
// 5. 返回哑节点的下一个节点，即新链表的头节点。
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */