var averageOfLevels = function(root) {
    const result = [];
    const queue = [[root, 0]];

    while (queue.length) {
        const levelSize = queue.length; // 当前层的节点数
        let sum = 0; // 当前层节点值的总和

        for (let i = 0; i < levelSize; ++i) {
            const [node, level] = queue.shift();
            sum += node.val; // 累加当前层节点值

            if (node.left) queue.push([node.left, level + 1]);
            if (node.right) queue.push([node.right, level + 1]);
        }

        result.push(sum / levelSize); // 计算当前层的平均值并加入结果数组
    }

    return result;
};

if (node.left) queue.push([node.left, level + 1]);
if (node.right) queue.push([node.right, level + 1]);
为什么不是放在
 result.push(sum / levelSize); // 计算当前层的平均值并加入结果数组 之后的
 放在for循环岂不是会一直遍历到最深叶节点吗


放置`if (node.left) queue.push([node.left, level + 1]);` 和 `if (node.right) queue.push([node.right, level + 1]);`在`for`循环内部是确保能够层序遍历整棵树的关键所在。这个过程确实会遍历到最深的叶节点，这正是我们计算每一层平均值所需要的。让我们逐步解释这个过程：

1. **队列的作用**：队列`queue`在这里用于存储待遍历的节点以及它们所在的层级（尽管在这个特定的实现中，层级信息`level`没有被直接使用来计算平均值，但它有助于理解算法的通用性）。队列先入先出（FIFO）的特性确保了我们按照从上到下、从左到右的顺序遍历树的每一层。

2. **层序遍历**：在每一轮的`while`循环开始时，队列`queue`包含的是当前层的所有节点。`levelSize`记录了当前层的节点数量，确保`for`循环只遍历当前层的节点。

3. **处理当前层节点**：对于`for`循环遍历的每个节点，我们通过`queue.shift()`取出并处理。在处理每个节点时，我们计算总和`sum`，然后检查该节点的左右子节点。如果子节点存在，我们将它们加入到队列的末尾。这一步是非常重要的，因为它确保了下一次`while`循环迭代时，队列中将包含下一层的所有节点。

4. **为何在`for`循环内添加子节点**：将当前节点的子节点加入队列是在当前层的节点遍历过程中进行的，这样做是为了保证队列总是按照层序包含下一层的所有节点。只有这样，我们才能在计算完当前层的平均值后，立即开始处理下一层的节点。如果我们等到`result.push(sum / levelSize);`之后才添加子节点到队列，就会打乱层序遍历的逻辑顺序，导致无法正确地逐层计算平均值。

5. **保证层序遍历的连续性**：通过在每一轮`while`循环的内部`for`循环中加入下一层的节点到队列，我们保证了每次处理完一层节点后，队列中正好包含下一层的所有节点，这保证了层序遍历的连续性和正确性。

总结来说，这种设计是为了确保每一次循环能够处理一整层的节点，并且在处理每个节点时，通过将其子节点加入队列来准备下一层的遍历。这种方式确保了我们能够按顺序遍历树的每一层，从而计算出每层的平均值。