/**
 * 分治-递归构建解法
 * 1. 将中间元素作为二叉搜索树的根节点，可以保证构建的树是高度平衡的。
 * 2. 使用递归方法，分别对中间节点左侧和右侧的子数组进行同样的处理，构建左子树和右子树。
 * 3. 递归细节：
 *   - 递归的终止条件是子数组没有元素（即开始索引大于结束索引）。
 *   - 每次递归选择子数组的中间元素作为根节点，创建树节点。
 *   - 递归构建左子树和右子树，然后将它们连接到当前的根节点上。
 *   - 返回一个二叉树 类似链表感觉
 * 4. 整体过程是对数组进行一次中序遍历，时间复杂度为O(n)，其中n是数组长度。
 * @param {number[]} nums
 * @return {TreeNode}
 */

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
 
 var sortedArrayToBST = function(nums) {

};