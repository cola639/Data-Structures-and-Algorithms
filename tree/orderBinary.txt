1 前中后序遍历

     A
    / \
    B  C
   / \  \
  D   E  F

前序遍历（Pre-order Traversal）  "根-左-右"
A -> B -> D -> E -> C -> F

中序遍历（In-order Traversal）   "左-根-右"
D -> B -> E -> A -> C -> F

后序遍历（Post-order Traversal） "左-右-根"
D -> E -> B -> F -> C -> A

2 平衡二叉树 是指该树所有节点的左右子树的深度相差不超过 1

3 在二叉搜索树（Binary Search Tree, BST）中，**中序遍历**的结果总是一个递增的数组。对于二叉搜索树，满足以下性质：

- **左子树**中所有节点的值均小于根节点的值。
- **右子树**中所有节点的值均大于根节点的值。
- 左子树和右子树也分别是二叉搜索树。

### 1. 二叉搜索树的性质
由于上述性质，对于一个二叉搜索树，使用**中序遍历**（即按照 "左子树 -> 根节点 -> 右子树" 的顺序遍历）时，节点的值会按照递增顺序排列。因此，中序遍历结果是一个递增的数组。

### 2. 前序和后序遍历
- **前序遍历**（"根节点 -> 左子树 -> 右子树"）：不一定是递增的，因为根节点在左子树之前访问，所以无法保证顺序。
- **后序遍历**（"左子树 -> 右子树 -> 根节点"）：也不一定是递增的，因为根节点在最后访问，右子树在根节点之前访问，所以顺序也不保证递增。

### 3. 举例说明
考虑以下二叉搜索树：
```
    2
   / \
  1   3
```

- **中序遍历**：`1, 2, 3` （递增）
- **前序遍历**：`2, 1, 3` （不递增）
- **后序遍历**：`1, 3, 2` （不递增）

### 结论
- 在二叉搜索树中，**中序遍历**的结果总是递增的数组。
- 前序和后序遍历的结果在一般情况下不会是递增的。 

因此，二叉搜索树是满足你问题的唯一一种树结构，其中中序遍历的结果是递增的数组。